Keaton Raymond, Last 4 of student number: 5013, CS4100, FALL 2022
INPUT FILE TO PROCESS IS: /Users/keatonraymond/Downloads/GoodSyntaxA-FA22.txt
0001 
0002 UNIT goodtree;
	UNIT_ | 	0015 | 	UNIT
--> Entering Program
	IDENT | 	0050 | 	goodtree
	SEMCO | 	0036 | 	;
0003 
0004 (* This Part A test file should have NO errors! *)
0005 
0006 BEGIN
	BEGIN | 	0011 | 	BEGIN
 --> Entering Block
0007 { The only statements for Part A are ASSIGNMENTS with EXPRESSIONS }
0008 
0009 total:=3.14*radius*radius;
	IDENT | 	0050 | 	total
  --> Entering Statement
   --> Entering handleAssignment
    --> Entering Variable
	EQUAL | 	0037 | 	:=
    <-- Exiting Variable
	FCNST | 	0052 | 	3.14
    --> Entering SimpleExpression
     --> Entering Term
      --> Entering Factor
       --> Entering UnsignedConstant
        --> Entering UnsignedNumber
	MULTI | 	0031 | 	*
        <-- Exiting UnsignedNumber
       <-- Exiting UnsignedConstant
      <-- Exiting Factor
      --> Entering Mulop
	IDENT | 	0050 | 	radius
      <-- Exiting Mulop
      --> Entering Factor
       --> Entering Variable
	MULTI | 	0031 | 	*
       <-- Exiting Variable
      <-- Exiting Factor
      --> Entering Mulop
	IDENT | 	0050 | 	radius
      <-- Exiting Mulop
      --> Entering Factor
       --> Entering Variable
	SEMCO | 	0036 | 	;
       <-- Exiting Variable
      <-- Exiting Factor
     <-- Exiting Term
    <-- Exiting SimpleExpression
   <-- Exiting handleAssignment
  <-- Exiting Statement
0010 
0011 a :=(a+c)*(b-d)       ;
	IDENT | 	0050 | 	a
  --> Entering Statement
   --> Entering handleAssignment
    --> Entering Variable
	EQUAL | 	0037 | 	:=
    <-- Exiting Variable
	OPENP | 	0034 | 	(
    --> Entering SimpleExpression
     --> Entering Term
      --> Entering Factor
	IDENT | 	0050 | 	a
       --> Entering SimpleExpression
        --> Entering Term
         --> Entering Factor
          --> Entering Variable
	ADD__ | 	0032 | 	+
          <-- Exiting Variable
         <-- Exiting Factor
        <-- Exiting Term
        --> Entering Addop
	IDENT | 	0050 | 	c
        <-- Exiting Addop
        --> Entering Term
         --> Entering Factor
          --> Entering Variable
	CLOSP | 	0035 | 	)
          <-- Exiting Variable
         <-- Exiting Factor
        <-- Exiting Term
       <-- Exiting SimpleExpression
	MULTI | 	0031 | 	*
      <-- Exiting Factor
      --> Entering Mulop
	OPENP | 	0034 | 	(
      <-- Exiting Mulop
      --> Entering Factor
	IDENT | 	0050 | 	b
       --> Entering SimpleExpression
        --> Entering Term
         --> Entering Factor
          --> Entering Variable
	SUBTR | 	0033 | 	-
          <-- Exiting Variable
         <-- Exiting Factor
        <-- Exiting Term
        --> Entering Addop
	IDENT | 	0050 | 	d
        <-- Exiting Addop
        --> Entering Term
         --> Entering Factor
          --> Entering Variable
	CLOSP | 	0035 | 	)
          <-- Exiting Variable
         <-- Exiting Factor
        <-- Exiting Term
       <-- Exiting SimpleExpression
	SEMCO | 	0036 | 	;
      <-- Exiting Factor
     <-- Exiting Term
    <-- Exiting SimpleExpression
   <-- Exiting handleAssignment
  <-- Exiting Statement
0012 
0013 d1 := -b - ((2+4) + 2*34) * c / 2.5
	IDENT | 	0050 | 	d1
  --> Entering Statement
   --> Entering handleAssignment
    --> Entering Variable
	EQUAL | 	0037 | 	:=
    <-- Exiting Variable
	SUBTR | 	0033 | 	-
    --> Entering SimpleExpression
     --> Entering Sign
	IDENT | 	0050 | 	b
     <-- Exiting Sign
     --> Entering Term
      --> Entering Factor
       --> Entering Variable
	SUBTR | 	0033 | 	-
       <-- Exiting Variable
      <-- Exiting Factor
     <-- Exiting Term
     --> Entering Addop
	OPENP | 	0034 | 	(
     <-- Exiting Addop
     --> Entering Term
      --> Entering Factor
	OPENP | 	0034 | 	(
       --> Entering SimpleExpression
        --> Entering Term
         --> Entering Factor
	_INT_ | 	0051 | 	2
          --> Entering SimpleExpression
           --> Entering Term
            --> Entering Factor
             --> Entering UnsignedConstant
              --> Entering UnsignedNumber
	ADD__ | 	0032 | 	+
              <-- Exiting UnsignedNumber
             <-- Exiting UnsignedConstant
            <-- Exiting Factor
           <-- Exiting Term
           --> Entering Addop
	_INT_ | 	0051 | 	4
           <-- Exiting Addop
           --> Entering Term
            --> Entering Factor
             --> Entering UnsignedConstant
              --> Entering UnsignedNumber
	CLOSP | 	0035 | 	)
              <-- Exiting UnsignedNumber
             <-- Exiting UnsignedConstant
            <-- Exiting Factor
           <-- Exiting Term
          <-- Exiting SimpleExpression
	ADD__ | 	0032 | 	+
         <-- Exiting Factor
        <-- Exiting Term
        --> Entering Addop
	_INT_ | 	0051 | 	2
        <-- Exiting Addop
        --> Entering Term
         --> Entering Factor
          --> Entering UnsignedConstant
           --> Entering UnsignedNumber
	MULTI | 	0031 | 	*
           <-- Exiting UnsignedNumber
          <-- Exiting UnsignedConstant
         <-- Exiting Factor
         --> Entering Mulop
	_INT_ | 	0051 | 	34
         <-- Exiting Mulop
         --> Entering Factor
          --> Entering UnsignedConstant
           --> Entering UnsignedNumber
	CLOSP | 	0035 | 	)
           <-- Exiting UnsignedNumber
          <-- Exiting UnsignedConstant
         <-- Exiting Factor
        <-- Exiting Term
       <-- Exiting SimpleExpression
	MULTI | 	0031 | 	*
      <-- Exiting Factor
      --> Entering Mulop
	IDENT | 	0050 | 	c
      <-- Exiting Mulop
      --> Entering Factor
       --> Entering Variable
	DIVID | 	0030 | 	/
       <-- Exiting Variable
      <-- Exiting Factor
      --> Entering Mulop
	FCNST | 	0052 | 	2.5
      <-- Exiting Mulop
      --> Entering Factor
       --> Entering UnsignedConstant
        --> Entering UnsignedNumber
0014 
0015 end.
	END__ | 	0012 | 	end
        <-- Exiting UnsignedNumber
       <-- Exiting UnsignedConstant
      <-- Exiting Factor
     <-- Exiting Term
    <-- Exiting SimpleExpression
   <-- Exiting handleAssignment
  <-- Exiting Statement
	PERIO | 	0048 | 	.
 <-- Exiting Block
Success.
<-- Exiting Program
Done.
