library(tidyverse)
#import cause of death and continent/country CSVs
codDataCSV = read_csv("data/20220327 annual-number-of-deaths-by-cause.csv")
continentsCountries = read_csv("data/continents-according-to-our-world-in-data.csv")
#remove code and year from the continentsCountries dataframe, not necessary for my use
continentsCountries = select(continentsCountries, -c("Code", "Year"))
continentsCountries = unique(continentsCountries) #make sure no duplicates
#merge the two datasets so that I can sort on continent as opposed to country
#which has too many unique values
codData = merge(codDataCSV, continentsCountries, by = "Entity")
#remove some causes of death that have too many blanks, this way I can run the t-SNE properly
#explanation for why in the report
codData = select(codData, -c("Terrorism (deaths)", "Code",
"Deaths - Malaria - Sex: Both - Age: All Ages (Number)",
"Deaths - Exposure to forces of nature - Sex: Both - Age: All Ages (Number)",
"Deaths - Conflict and terrorism - Sex: Both - Age: All Ages (Number)"))
#remove rows with blank cells to run t-SNE properly
codData = codData %>% drop_na()
#create and normalize matrix
codMatrix = as.matrix(codData[,3:30])
normalizedMatrix = normalize_input(codMatrix)
#run t-SNE analysis
tsneOutput = Rtsne(normalizedMatrix, check_duplicates = FALSE)
#convert t-SNE analysis to dataframe
tsneDF = data.frame(x = tsneOutput$Y[,1], y = tsneOutput$Y[,2], col=codData$Continent)
#plot t-SNE analysis and save as a PNG
png("figures/testTSNE.png")
myPlot = ggplot(tsneDF, label=NA_Sales) + geom_point(aes(x=x, y=y, color=col))
print(myPlot)
dev.off()
library(readr)
library(dplyr)
library(tidyr)
library(Rtsne)
library(ggplot2)
library(tidyverse)
#import cause of death and continent/country CSVs
codDataCSV = read_csv("data/20220327 annual-number-of-deaths-by-cause.csv")
continentsCountries = read_csv("data/continents-according-to-our-world-in-data.csv")
#remove code and year from the continentsCountries dataframe, not necessary for my use
continentsCountries = select(continentsCountries, -c("Code", "Year"))
continentsCountries = unique(continentsCountries) #make sure no duplicates
#merge the two datasets so that I can sort on continent as opposed to country
#which has too many unique values
codData = merge(codDataCSV, continentsCountries, by = "Entity")
#remove some causes of death that have too many blanks, this way I can run the t-SNE properly
#explanation for why in the report
codData = select(codData, -c("Terrorism (deaths)", "Code",
"Deaths - Malaria - Sex: Both - Age: All Ages (Number)",
"Deaths - Exposure to forces of nature - Sex: Both - Age: All Ages (Number)",
"Deaths - Conflict and terrorism - Sex: Both - Age: All Ages (Number)"))
#remove rows with blank cells to run t-SNE properly
codData = codData %>% drop_na()
#create and normalize matrix
codMatrix = as.matrix(codData[,3:30])
normalizedMatrix = normalize_input(codMatrix)
#run t-SNE analysis
tsneOutput = Rtsne(normalizedMatrix, check_duplicates = FALSE)
#convert t-SNE analysis to dataframe
tsneDF = data.frame(x = tsneOutput$Y[,1], y = tsneOutput$Y[,2], col=codData$Continent)
#plot t-SNE analysis and save as a PNG
png("figures/testTSNE.png")
myPlot = ggplot(tsneDF, label=NA_Sales) + geom_point(aes(x=x, y=y, color=col))
print(myPlot)
dev.off()
library(readr)
library(dplyr)
library(tidyr)
#import cause of death and continent/country CSVs
codDataCSV = read_csv("data/20220327 annual-number-of-deaths-by-cause.csv")
continentsCountries = read_csv("data/continents-according-to-our-world-in-data.csv")
#remove code and year from the continentsCountries dataframe, not necessary for my use
continentsCountries = select(continentsCountries, -c("Code", "Year"))
continentsCountries = unique(continentsCountries) #make sure no duplicates
#merge the two datasets so that I can sort on continent as opposed to country
#which has too many unique values
codData = merge(codDataCSV, continentsCountries, by = "Entity")
#remove some causes of death that have too many blanks, this way I can run the t-SNE properly
#explanation for why in the report
codData = select(codData, -c("Terrorism (deaths)", "Code",
"Deaths - Malaria - Sex: Both - Age: All Ages (Number)",
"Deaths - Exposure to forces of nature - Sex: Both - Age: All Ages (Number)",
"Deaths - Conflict and terrorism - Sex: Both - Age: All Ages (Number)"))
#remove rows with blank cells to run t-SNE properly
codData = codData %>% drop_na()
library(Rtsne)
library(ggplot2)
#create and normalize matrix
codMatrix = as.matrix(codData[,3:30])
normalizedMatrix = normalize_input(codMatrix)
#run t-SNE analysis
tsneOutput = Rtsne(normalizedMatrix, check_duplicates = FALSE)
#convert t-SNE analysis to dataframe
tsneDF = data.frame(x = tsneOutput$Y[,1], y = tsneOutput$Y[,2], col=codData$Continent)
#plot t-SNE analysis and save as a PNG
png("figures/tsneRunOneOutputOne.png")
myPlot = ggplot(tsneDF, label=NA_Sales) + geom_point(aes(x=x, y=y, color=col))
print(myPlot)
dev.off()
#create and normalize matrix
codMatrix = as.matrix(codData[,3:30])
normalizedMatrix = normalize_input(codMatrix)
#run t-SNE analysis
tsneOutput = Rtsne(normalizedMatrix, check_duplicates = FALSE)
#convert t-SNE analysis to dataframe
tsneDF = data.frame(x = tsneOutput$Y[,1], y = tsneOutput$Y[,2], col=codData$Continent)
#plot t-SNE analysis and save as a PNG
png("figures/tsneRunOneOutputTwo.png")
myPlot = ggplot(tsneDF, label=NA_Sales) + geom_point(aes(x=x, y=y, color=col))
print(myPlot)
dev.off()
#create and normalize matrix
codMatrix = as.matrix(codData[,3:30])
normalizedMatrix = normalize_input(codMatrix)
#run t-SNE analysis
tsneOutput = Rtsne(normalizedMatrix, check_duplicates = FALSE)
#convert t-SNE analysis to dataframe
tsneDF = data.frame(x = tsneOutput$Y[,1], y = tsneOutput$Y[,2], col=codData$Continent)
#plot t-SNE analysis and save as a PNG
png("figures/tsneRunOneOutputThree.png")
myPlot = ggplot(tsneDF, label=NA_Sales) + geom_point(aes(x=x, y=y, color=col))
print(myPlot)
dev.off()
View(codData)
codData = select(codData, -c[3:5])
codData = select(codData, -c[,3:5])
codData = codData[-c(3:5)]
library(readr)
library(dplyr)
library(tidyr)
#import cause of death and continent/country CSVs
codDataCSV = read_csv("data/20220327 annual-number-of-deaths-by-cause.csv")
continentsCountries = read_csv("data/continents-according-to-our-world-in-data.csv")
#remove code and year from the continentsCountries dataframe, not necessary for my use
continentsCountries = select(continentsCountries, -c("Code", "Year"))
continentsCountries = unique(continentsCountries) #make sure no duplicates
#merge the two datasets so that I can sort on continent as opposed to country
#which has too many unique values
codData = merge(codDataCSV, continentsCountries, by = "Entity")
#remove some causes of death that have too many blanks, this way I can run the t-SNE properly
#explanation for why in the report
codData = select(codData, -c("Terrorism (deaths)", "Code",
"Deaths - Malaria - Sex: Both - Age: All Ages (Number)",
"Deaths - Exposure to forces of nature - Sex: Both - Age: All Ages (Number)",
"Deaths - Conflict and terrorism - Sex: Both - Age: All Ages (Number)"))
#remove rows with blank cells to run t-SNE properly
codData = codData %>% drop_na()
codData = codData[-c(3:7)]
library(readr)
library(dplyr)
library(tidyr)
#import cause of death and continent/country CSVs
codDataCSV = read_csv("data/20220327 annual-number-of-deaths-by-cause.csv")
continentsCountries = read_csv("data/continents-according-to-our-world-in-data.csv")
#remove code and year from the continentsCountries dataframe, not necessary for my use
continentsCountries = select(continentsCountries, -c("Code", "Year"))
continentsCountries = unique(continentsCountries) #make sure no duplicates
#merge the two datasets so that I can sort on continent as opposed to country
#which has too many unique values
codData = merge(codDataCSV, continentsCountries, by = "Entity")
#remove some causes of death that have too many blanks, this way I can run the t-SNE properly
#explanation for why in the report
codData = select(codData, -c("Terrorism (deaths)", "Code",
"Deaths - Malaria - Sex: Both - Age: All Ages (Number)",
"Deaths - Exposure to forces of nature - Sex: Both - Age: All Ages (Number)",
"Deaths - Conflict and terrorism - Sex: Both - Age: All Ages (Number)"))
#remove rows with blank cells to run t-SNE properly
codData = codData %>% drop_na()
codDataRunTwo = codData[-c(3:7)]
library(Rtsne)
library(ggplot2)
#---------------------
#Remove Some Columns
#---------------------
codDataRunTwo = codData[-c(3:7)]
#---------------------
#Run Two Output One
#---------------------
#create and normalize matrix
codMatrixRunTwo = as.matrix(codDataRunTwo[,3:25])
normalizedMatrix = normalize_input(codMatrixRunTwo)
#run t-SNE analysis
tsneOutput = Rtsne(normalizedMatrix, check_duplicates = FALSE)
#convert t-SNE analysis to dataframe
tsneDF = data.frame(x = tsneOutput$Y[,1], y = tsneOutput$Y[,2], col=codDataRunTwo$Continent)
#plot t-SNE analysis and save as a PNG
png("figures/tsneRunTwoOutputOne.png")
myPlot = ggplot(tsneDF, label=NA_Sales) + geom_point(aes(x=x, y=y, color=col))
print(myPlot)
dev.off()
#---------------------
#Run Two Output Two
#---------------------
#run t-SNE analysis
tsneOutput = Rtsne(normalizedMatrix, check_duplicates = FALSE)
#convert t-SNE analysis to dataframe
tsneDF = data.frame(x = tsneOutput$Y[,1], y = tsneOutput$Y[,2], col=codDataRunTwo$Continent)
#plot t-SNE analysis and save as a PNG
png("figures/tsneRunTwoOutputTwo.png")
myPlot = ggplot(tsneDF, label=NA_Sales) + geom_point(aes(x=x, y=y, color=col))
print(myPlot)
dev.off()
#---------------------
#Run Two Output Three
#---------------------
#run t-SNE analysis
tsneOutput = Rtsne(normalizedMatrix, check_duplicates = FALSE)
#convert t-SNE analysis to dataframe
tsneDF = data.frame(x = tsneOutput$Y[,1], y = tsneOutput$Y[,2], col=codDataRunTwo$Continent)
#plot t-SNE analysis and save as a PNG
png("figures/tsneRunTwoOutputThree.png")
myPlot = ggplot(tsneDF, label=NA_Sales) + geom_point(aes(x=x, y=y, color=col))
print(myPlot)
dev.off()
codDataRunThree = codData[-c(3:12)]
library(Rtsne)
library(ggplot2)
#---------------------
#Remove Some More Columns
#---------------------
codDataRunThree = codData[-c(3:12)]
#---------------------
#Run Three Output One
#---------------------
#create and normalize matrix
codMatrixRunThree = as.matrix(codDataRunThree[,3:20])
normalizedMatrix = normalize_input(codMatrixRunThree)
#run t-SNE analysis
tsneOutput = Rtsne(normalizedMatrix, check_duplicates = FALSE)
#convert t-SNE analysis to dataframe
tsneDF = data.frame(x = tsneOutput$Y[,1], y = tsneOutput$Y[,2], col=codDataRunThree$Continent)
#plot t-SNE analysis and save as a PNG
png("figures/tsneRunThreeOutputOne.png")
myPlot = ggplot(tsneDF, label=NA_Sales) + geom_point(aes(x=x, y=y, color=col))
print(myPlot)
dev.off()
#---------------------
#Run Three Output Two
#---------------------
#run t-SNE analysis
tsneOutput = Rtsne(normalizedMatrix, check_duplicates = FALSE)
#convert t-SNE analysis to dataframe
tsneDF = data.frame(x = tsneOutput$Y[,1], y = tsneOutput$Y[,2], col=codDataRunThree$Continent)
#plot t-SNE analysis and save as a PNG
png("figures/tsneRunThreeOutputTwo.png")
myPlot = ggplot(tsneDF, label=NA_Sales) + geom_point(aes(x=x, y=y, color=col))
print(myPlot)
dev.off()
#---------------------
#Run Three Output Three
#---------------------
#run t-SNE analysis
tsneOutput = Rtsne(normalizedMatrix, check_duplicates = FALSE)
#convert t-SNE analysis to dataframe
tsneDF = data.frame(x = tsneOutput$Y[,1], y = tsneOutput$Y[,2], col=codDataRunThree$Continent)
#plot t-SNE analysis and save as a PNG
png("figures/tsneRunThreeOutputThree.png")
myPlot = ggplot(tsneDF, label=NA_Sales) + geom_point(aes(x=x, y=y, color=col))
print(myPlot)
dev.off()
library(readr)
library(dplyr)
library(tidyr)
library(Rtsne)
library(ggplot2)
#import cause of death and continent/country CSVs
codDataCSV = read_csv("data/20220327 annual-number-of-deaths-by-cause.csv")
continentsCountries = read_csv("data/continents-according-to-our-world-in-data.csv")
#remove code and year from the continentsCountries dataframe, not necessary for my use
continentsCountries = select(continentsCountries, -c("Code", "Year"))
continentsCountries = unique(continentsCountries) #make sure no duplicates
#merge the two datasets so that I can sort on continent as opposed to country
#which has too many unique values
codData = merge(codDataCSV, continentsCountries, by = "Entity")
#remove some causes of death that have too many blanks, this way I can run the t-SNE properly
#explanation for why in the report
codData = select(codData, -c("Terrorism (deaths)", "Code",
"Deaths - Malaria - Sex: Both - Age: All Ages (Number)",
"Deaths - Exposure to forces of nature - Sex: Both - Age: All Ages (Number)",
"Deaths - Conflict and terrorism - Sex: Both - Age: All Ages (Number)"))
#remove rows with blank cells to run t-SNE properly
codData = codData %>% drop_na()
#create and normalize matrix
codMatrix = as.matrix(codData[,3:13])
normalizedMatrix = normalize_input(codMatrix)
#run t-SNE analysis
tsneOutput = Rtsne(normalizedMatrix, check_duplicates = FALSE)
#convert t-SNE analysis to dataframe
tsneDF = data.frame(x = tsneOutput$Y[,1], y = tsneOutput$Y[,2], col=codData$Continent)
#plot t-SNE analysis and save as a PNG
png("figures/testTSNE.png")
myPlot = ggplot(tsneDF, label=NA_Sales) + geom_point(aes(x=x, y=y, color=col))
print(myPlot)
dev.off()
library(readr)
library(dplyr)
library(tidyr)
#import cause of death and continent/country CSVs
codDataCSV = read_csv("data/20220327 annual-number-of-deaths-by-cause.csv")
library(readr)
library(dplyr)
library(tidyr)
#import cause of death and continent/country CSVs
codDataCSV = read_csv("data/20220327 annual-number-of-deaths-by-cause.csv")
continentsCountries = read_csv("data/continents-according-to-our-world-in-data.csv")
#remove code and year from the continentsCountries dataframe, not necessary for my use
continentsCountries = select(continentsCountries, -c("Code", "Year"))
continentsCountries = unique(continentsCountries) #make sure no duplicates
#merge the two datasets so that I can sort on continent as opposed to country
#which has too many unique values
codData = merge(codDataCSV, continentsCountries, by = "Entity")
#remove some causes of death that have too many blanks, this way I can run the t-SNE properly
#explanation for why in the report
codData = select(codData, -c("Terrorism (deaths)", "Code",
"Deaths - Malaria - Sex: Both - Age: All Ages (Number)",
"Deaths - Exposure to forces of nature - Sex: Both - Age: All Ages (Number)",
"Deaths - Conflict and terrorism - Sex: Both - Age: All Ages (Number)"))
#remove rows with blank cells to run t-SNE properly
codData = codData %>% drop_na()
library(Rtsne)
library(ggplot2)
#---------------------
#Remove Some Columns
#---------------------
#remove first 5 columns
#codDataRunTwo = codData[-c(3:7)]
#remove disease columns
codDataRunTwo = select(codData, -c("Deaths - Alzheimer's disease and other dementias - Sex: Both - Age: All Ages (Number)",
"Deaths - Parkinson's disease - Sex: Both - Age: All Ages (Number)",
"Deaths - HIV/AIDS - Sex: Both - Age: All Ages (Number)",
"Deaths - Meningitis - Sex: Both - Age: All Ages (Number)",
"Deaths - Neoplasms - Sex: Both - Age: All Ages (Number)",
"Deaths - Tuberculosis - Sex: Both - Age: All Ages (Number)",
"Deaths - Diarrheal diseases - Sex: Both - Age: All Ages (Number)",
"Deaths - Cardiovascular diseases - Sex: Both - Age: All Ages (Number)",
"Deaths - Chronic kidney disease - Sex: Both - Age: All Ages (Number)",
"Deaths - Chronic respiratory diseases - Sex: Both - Age: All Ages (Number)",
"Deaths - Cirrhosis and other chronic liver diseases - Sex: Both - Age: All Ages (Number)",
"Deaths - Digestive diseases - Sex: Both - Age: All Ages (Number)",
"Deaths - Diabetes mellitus - Sex: Both - Age: All Ages (Number)",
"Deaths - Acute hepatitis - Sex: Both - Age: All Ages (Number)",
"Deaths - Lower respiratory infections - Sex: Both - Age: All Ages (Number)"))
#---------------------
#Run Two Output One
#---------------------
#create and normalize matrix
codMatrixRunTwo = as.matrix(codDataRunTwo[,3:25])
codDataRunTwo = select(codData, -c("Deaths - Alzheimer's disease and other dementias - Sex: Both - Age: All Ages (Number)",
"Deaths - Parkinson's disease - Sex: Both - Age: All Ages (Number)",
"Deaths - HIV/AIDS - Sex: Both - Age: All Ages (Number)",
"Deaths - Meningitis - Sex: Both - Age: All Ages (Number)",
"Deaths - Neoplasms - Sex: Both - Age: All Ages (Number)",
"Deaths - Tuberculosis - Sex: Both - Age: All Ages (Number)",
"Deaths - Diarrheal diseases - Sex: Both - Age: All Ages (Number)",
"Deaths - Cardiovascular diseases - Sex: Both - Age: All Ages (Number)",
"Deaths - Chronic kidney disease - Sex: Both - Age: All Ages (Number)",
"Deaths - Chronic respiratory diseases - Sex: Both - Age: All Ages (Number)",
"Deaths - Cirrhosis and other chronic liver diseases - Sex: Both - Age: All Ages (Number)",
"Deaths - Digestive diseases - Sex: Both - Age: All Ages (Number)",
"Deaths - Diabetes mellitus - Sex: Both - Age: All Ages (Number)",
"Deaths - Acute hepatitis - Sex: Both - Age: All Ages (Number)",
"Deaths - Lower respiratory infections - Sex: Both - Age: All Ages (Number)"))
View(codDataRunTwo)
library(Rtsne)
library(ggplot2)
#---------------------
#Remove Some Columns
#---------------------
#remove first 5 columns
#codDataRunTwo = codData[-c(3:7)]
#remove disease columns
codDataRunTwo = select(codData, -c("Deaths - Alzheimer's disease and other dementias - Sex: Both - Age: All Ages (Number)",
"Deaths - Parkinson's disease - Sex: Both - Age: All Ages (Number)",
"Deaths - HIV/AIDS - Sex: Both - Age: All Ages (Number)",
"Deaths - Meningitis - Sex: Both - Age: All Ages (Number)",
"Deaths - Neoplasms - Sex: Both - Age: All Ages (Number)",
"Deaths - Tuberculosis - Sex: Both - Age: All Ages (Number)",
"Deaths - Diarrheal diseases - Sex: Both - Age: All Ages (Number)",
"Deaths - Cardiovascular diseases - Sex: Both - Age: All Ages (Number)",
"Deaths - Chronic kidney disease - Sex: Both - Age: All Ages (Number)",
"Deaths - Chronic respiratory diseases - Sex: Both - Age: All Ages (Number)",
"Deaths - Cirrhosis and other chronic liver diseases - Sex: Both - Age: All Ages (Number)",
"Deaths - Digestive diseases - Sex: Both - Age: All Ages (Number)",
"Deaths - Diabetes mellitus - Sex: Both - Age: All Ages (Number)",
"Deaths - Acute hepatitis - Sex: Both - Age: All Ages (Number)",
"Deaths - Lower respiratory infections - Sex: Both - Age: All Ages (Number)"))
#---------------------
#Run Two Output One
#---------------------
#create and normalize matrix
codMatrixRunTwo = as.matrix(codDataRunTwo[,3:15])
normalizedMatrix = normalize_input(codMatrixRunTwo)
#run t-SNE analysis
tsneOutput = Rtsne(normalizedMatrix, check_duplicates = FALSE)
#convert t-SNE analysis to dataframe
tsneDF = data.frame(x = tsneOutput$Y[,1], y = tsneOutput$Y[,2], col=codDataRunTwo$Continent)
#plot t-SNE analysis and save as a PNG
png("figures/tsneRunTwoOutputOne.png")
myPlot = ggplot(tsneDF, label=NA_Sales) + geom_point(aes(x=x, y=y, color=col))
print(myPlot)
dev.off()
#---------------------
#Run Two Output Two
#---------------------
#run t-SNE analysis
tsneOutput = Rtsne(normalizedMatrix, check_duplicates = FALSE)
#convert t-SNE analysis to dataframe
tsneDF = data.frame(x = tsneOutput$Y[,1], y = tsneOutput$Y[,2], col=codDataRunTwo$Continent)
#plot t-SNE analysis and save as a PNG
png("figures/tsneRunTwoOutputTwo.png")
myPlot = ggplot(tsneDF, label=NA_Sales) + geom_point(aes(x=x, y=y, color=col))
print(myPlot)
dev.off()
#---------------------
#Run Two Output Three
#---------------------
#run t-SNE analysis
tsneOutput = Rtsne(normalizedMatrix, check_duplicates = FALSE)
#convert t-SNE analysis to dataframe
tsneDF = data.frame(x = tsneOutput$Y[,1], y = tsneOutput$Y[,2], col=codDataRunTwo$Continent)
#plot t-SNE analysis and save as a PNG
png("figures/tsneRunTwoOutputThree.png")
myPlot = ggplot(tsneDF, label=NA_Sales) + geom_point(aes(x=x, y=y, color=col))
print(myPlot)
dev.off()
codDataRunThree = select(codData, -c("Deaths - Fire, heat, and hot substances - Sex: Both - Age: All Ages (Number)",
"Deaths - Drowning - Sex: Both - Age: All Ages (Number)",
"Deaths - Interpersonal violence - Sex: Both - Age: All Ages (Number)",
"Deaths - Road injuries - Sex: Both - Age: All Ages (Number)",
"Deaths - Self-harm - Sex: Both - Age: All Ages (Number)",
"Deaths - Poisonings - Sex: Both - Age: All Ages (Number)",
"Deaths - Alcohol use disorders - Sex: Both - Age: All Ages (Number)",
"Deaths - Drug use disorders - Sex: Both - Age: All Ages (Number)",
"Deaths - Environmental heat and cold exposure - Sex: Both - Age: All Ages (Number)"))
library(Rtsne)
library(ggplot2)
#---------------------
#Remove Some More Columns
#---------------------
#remove first 10 columns
#codDataRunThree = codData[-c(3:12)]
#remove columns related to violence, external causes, or self caused
codDataRunThree = select(codData, -c("Deaths - Fire, heat, and hot substances - Sex: Both - Age: All Ages (Number)",
"Deaths - Drowning - Sex: Both - Age: All Ages (Number)",
"Deaths - Interpersonal violence - Sex: Both - Age: All Ages (Number)",
"Deaths - Road injuries - Sex: Both - Age: All Ages (Number)",
"Deaths - Self-harm - Sex: Both - Age: All Ages (Number)",
"Deaths - Poisonings - Sex: Both - Age: All Ages (Number)",
"Deaths - Alcohol use disorders - Sex: Both - Age: All Ages (Number)",
"Deaths - Drug use disorders - Sex: Both - Age: All Ages (Number)",
"Deaths - Environmental heat and cold exposure - Sex: Both - Age: All Ages (Number)"))
#---------------------
#Run Three Output One
#---------------------
#create and normalize matrix
codMatrixRunThree = as.matrix(codDataRunThree[,3:21])
normalizedMatrix = normalize_input(codMatrixRunThree)
#run t-SNE analysis
tsneOutput = Rtsne(normalizedMatrix, check_duplicates = FALSE)
#convert t-SNE analysis to dataframe
tsneDF = data.frame(x = tsneOutput$Y[,1], y = tsneOutput$Y[,2], col=codDataRunThree$Continent)
#plot t-SNE analysis and save as a PNG
png("figures/tsneRunThreeOutputOne.png")
myPlot = ggplot(tsneDF, label=NA_Sales) + geom_point(aes(x=x, y=y, color=col))
print(myPlot)
dev.off()
#---------------------
#Run Three Output Two
#---------------------
#run t-SNE analysis
tsneOutput = Rtsne(normalizedMatrix, check_duplicates = FALSE)
#convert t-SNE analysis to dataframe
tsneDF = data.frame(x = tsneOutput$Y[,1], y = tsneOutput$Y[,2], col=codDataRunThree$Continent)
#plot t-SNE analysis and save as a PNG
png("figures/tsneRunThreeOutputTwo.png")
myPlot = ggplot(tsneDF, label=NA_Sales) + geom_point(aes(x=x, y=y, color=col))
print(myPlot)
dev.off()
#---------------------
#Run Three Output Three
#---------------------
#run t-SNE analysis
tsneOutput = Rtsne(normalizedMatrix, check_duplicates = FALSE)
#convert t-SNE analysis to dataframe
tsneDF = data.frame(x = tsneOutput$Y[,1], y = tsneOutput$Y[,2], col=codDataRunThree$Continent)
#plot t-SNE analysis and save as a PNG
png("figures/tsneRunThreeOutputThree.png")
myPlot = ggplot(tsneDF, label=NA_Sales) + geom_point(aes(x=x, y=y, color=col))
print(myPlot)
dev.off()
View(codDataCSV)
library(Rtsne)
library(ggplot2)
#---------------------
#Run One Output One
#---------------------
#create and normalize matrix
codMatrix = as.matrix(codData[,3:30])
normalizedMatrix = normalize_input(codMatrix)
#run t-SNE analysis
tsneOutput = Rtsne(normalizedMatrix, check_duplicates = FALSE)
#convert t-SNE analysis to dataframe
tsneDF = data.frame(x = tsneOutput$Y[,1], y = tsneOutput$Y[,2], col=codData$Continent)
#plot t-SNE analysis and save as a PNG
png("figures/tsneBaseDataOutputOne.png")
myPlot = ggplot(tsneDF, label=NA_Sales) + geom_point(aes(x=x, y=y, color=col))
#print(myPlot)
dev.off()
View(tsneDF)
View(tsneOutput)
View(tsneDF)
View(normalizedMatrix)
