png("Figures/question1GraphB.png", width=10, height=9, units="in", res=108)
sortedTypeFrame = setorder(typeFrame, cols="Count")
#creating the plot
#ggplot() create the plot from the typeFrame dataframe, the x axis is the item_type, y axis is the count, and fill defines the color
#geom_bar() says that this is a bar chart, stat="identity" is needed for the bar chart to group properly
#xlab("") removes the default label for the x axis
#theme() changes the x axis labels to be at a 45 degree angle and changes the vertical and horizontal justification so that it is below the graph not overlapping
#scale_fill_discrete() is used to change the legend from the default of only item_type to be item_type: count
typePlot = ggplot(typeFrame, aes(x=Item_Type, y=Count, fill=Item_Type)) +
geom_bar(stat = "identity") +
ggtitle("Item_Type") +
xlab("") +
theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
scale_fill_discrete(breaks=c(sortedTypeFrame$Count), labels=paste(typeFrame$Item_Type, typeFrame$Count, sep=": "))
print(typePlot)
dev.off()
#Keaton Raymond
#CS 4470
#TODO
#figure out how he cleaned the data to have a correct scale as opposed to the current
#import libraries
library(ggplot2)
library(dplyr) #not sure if needed
library("data.table")
#creates a table that contains the item type and the count for that item type
typeTable = table(joinedDataFrame$Item_Type)
#convert the table created above into a data frame so I can use ggplot
typeFrame = as.data.frame(typeTable)
#change the column names
colnames(typeFrame) = c("Item_Type", "Count")
#define the file to save the image to
png("Figures/question1GraphB.png", width=10, height=9, units="in", res=108)
sortedTypeFrame = setorder(typeFrame, cols="Count")
#creating the plot
#ggplot() create the plot from the typeFrame dataframe, the x axis is the item_type, y axis is the count, and fill defines the color
#geom_bar() says that this is a bar chart, stat="identity" is needed for the bar chart to group properly
#xlab("") removes the default label for the x axis
#theme() changes the x axis labels to be at a 45 degree angle and changes the vertical and horizontal justification so that it is below the graph not overlapping
#scale_fill_discrete() is used to change the legend from the default of only item_type to be item_type: count
typePlot = ggplot(typeFrame, aes(x=Item_Type, y=Count, fill=Item_Type)) +
geom_bar(stat = "identity") +
ggtitle("Item_Type") +
xlab("") +
theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
scale_fill_discrete(breaks=sortedTypeFrame$Count, labels=paste(typeFrame$Item_Type, typeFrame$Count, sep=": "))
print(typePlot)
dev.off()
#Keaton Raymond
#CS 4470
#TODO
#figure out how he cleaned the data to have a correct scale as opposed to the current
#import libraries
library(ggplot2)
library(dplyr) #not sure if needed
library("data.table")
#creates a table that contains the item type and the count for that item type
typeTable = table(joinedDataFrame$Item_Type)
#convert the table created above into a data frame so I can use ggplot
typeFrame = as.data.frame(typeTable)
#change the column names
colnames(typeFrame) = c("Item_Type", "Count")
#define the file to save the image to
png("Figures/question1GraphB.png", width=10, height=9, units="in", res=108)
sortedTypeFrame = setorder(typeFrame, cols="Count")
#creating the plot
#ggplot() create the plot from the typeFrame dataframe, the x axis is the item_type, y axis is the count, and fill defines the color
#geom_bar() says that this is a bar chart, stat="identity" is needed for the bar chart to group properly
#xlab("") removes the default label for the x axis
#theme() changes the x axis labels to be at a 45 degree angle and changes the vertical and horizontal justification so that it is below the graph not overlapping
#scale_fill_discrete() is used to change the legend from the default of only item_type to be item_type: count
typePlot = ggplot(typeFrame, aes(x=Item_Type, y=Count, fill=Item_Type)) +
geom_bar(stat = "identity") +
ggtitle("Item_Type") +
xlab("") +
theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
scale_fill_discrete(labels=paste(typeFrame$Item_Type, typeFrame$Count, sep=": "))
print(typePlot)
dev.off()
#Keaton Raymond
#CS 4470
#TODO
#figure out how he cleaned the data to have a correct scale as opposed to the current
#import libraries
library(ggplot2)
library(dplyr) #not sure if needed
library("data.table")
#creates a table that contains the item type and the count for that item type
typeTable = table(joinedDataFrame$Item_Type)
#convert the table created above into a data frame so I can use ggplot
typeFrame = as.data.frame(typeTable)
#change the column names
colnames(typeFrame) = c("Item_Type", "Count")
#define the file to save the image to
png("Figures/question1GraphB.png", width=10, height=9, units="in", res=108)
sortedTypeFrame = setorder(typeFrame, cols="Count")
#creating the plot
#ggplot() create the plot from the typeFrame dataframe, the x axis is the item_type, y axis is the count, and fill defines the color
#geom_bar() says that this is a bar chart, stat="identity" is needed for the bar chart to group properly
#xlab("") removes the default label for the x axis
#theme() changes the x axis labels to be at a 45 degree angle and changes the vertical and horizontal justification so that it is below the graph not overlapping
#scale_fill_discrete() is used to change the legend from the default of only item_type to be item_type: count
typePlot = ggplot(typeFrame, aes(x=Item_Type, y=Count, fill=Item_Type)) +
geom_bar(stat = "identity") +
ggtitle("Item_Type") +
xlab("") +
theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
scale_fill_discrete(labels=paste(typeFrame$Item_Type, typeFrame$Count, sep=": "))
print(typePlot)
dev.off()
#Keaton Raymond
#CS 4470
#TODO
#figure out how he cleaned the data to have a correct scale as opposed to the current
#import libraries
library(ggplot2)
library(dplyr) #not sure if needed
library("data.table")
#creates a table that contains the item type and the count for that item type
typeTable = table(joinedDataFrame$Item_Type)
#convert the table created above into a data frame so I can use ggplot
typeFrame = as.data.frame(typeTable)
#change the column names
colnames(typeFrame) = c("Item_Type", "Count")
#define the file to save the image to
png("Figures/question1GraphB.png", width=10, height=9, units="in", res=108)
#creating the plot
#ggplot() create the plot from the typeFrame dataframe, the x axis is the item_type, y axis is the count, and fill defines the color
#geom_bar() says that this is a bar chart, stat="identity" is needed for the bar chart to group properly
#xlab("") removes the default label for the x axis
#theme() changes the x axis labels to be at a 45 degree angle and changes the vertical and horizontal justification so that it is below the graph not overlapping
#scale_fill_discrete() is used to change the legend from the default of only item_type to be item_type: count
typePlot = ggplot(typeFrame, aes(x=Item_Type, y=Count, fill=Item_Type)) +
geom_bar(stat = "identity") +
ggtitle("Item_Type") +
xlab("") +
theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
scale_fill_discrete(labels=paste(typeFrame$Item_Type, typeFrame$Count, sep=": "))
print(typePlot)
dev.off()
#Keaton Raymond
#CS 4470
#TODO
#figure out how he cleaned the data to have a correct scale as opposed to the current
#import libraries
library(ggplot2)
library(dplyr) #not sure if needed
library("data.table")
#creates a table that contains the item type and the count for that item type
typeTable = table(joinedDataFrame$Item_Type)
#convert the table created above into a data frame so I can use ggplot
typeFrame = as.data.frame(typeTable)
#change the column names
colnames(typeFrame) = c("Item_Type", "Count")
#define the file to save the image to
png("Figures/question1GraphB.png", width=10, height=9, units="in", res=108)
setorder(typeFrame, cols="Count")
#creating the plot
#ggplot() create the plot from the typeFrame dataframe, the x axis is the item_type, y axis is the count, and fill defines the color
#geom_bar() says that this is a bar chart, stat="identity" is needed for the bar chart to group properly
#xlab("") removes the default label for the x axis
#theme() changes the x axis labels to be at a 45 degree angle and changes the vertical and horizontal justification so that it is below the graph not overlapping
#scale_fill_discrete() is used to change the legend from the default of only item_type to be item_type: count
typePlot = ggplot(typeFrame, aes(x=Item_Type, y=Count, fill=Item_Type)) +
geom_bar(stat = "identity") +
ggtitle("Item_Type") +
xlab("") +
theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
scale_fill_discrete(labels=paste(typeFrame$Item_Type, typeFrame$Count, sep=": "))
print(typePlot)
dev.off()
#Keaton Raymond
#CS 4470
#TODO
#figure out how he cleaned the data to have a correct scale as opposed to the current
#import libraries
library(ggplot2)
library(dplyr) #not sure if needed
library("data.table")
#creates a table that contains the item type and the count for that item type
typeTable = table(joinedDataFrame$Item_Type)
#convert the table created above into a data frame so I can use ggplot
typeFrame = as.data.frame(typeTable)
#change the column names
colnames(typeFrame) = c("Item_Type", "Count")
setorder(typeFrame, cols="Count")
#define the file to save the image to
png("Figures/question1GraphB.png", width=10, height=9, units="in", res=108)
#creating the plot
#ggplot() create the plot from the typeFrame dataframe, the x axis is the item_type, y axis is the count, and fill defines the color
#geom_bar() says that this is a bar chart, stat="identity" is needed for the bar chart to group properly
#xlab("") removes the default label for the x axis
#theme() changes the x axis labels to be at a 45 degree angle and changes the vertical and horizontal justification so that it is below the graph not overlapping
#scale_fill_discrete() is used to change the legend from the default of only item_type to be item_type: count
typePlot = ggplot(typeFrame, aes(x=Item_Type, y=Count, fill=Item_Type)) +
geom_bar(stat = "identity") +
ggtitle("Item_Type") +
xlab("") +
theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
scale_fill_discrete(labels=paste(typeFrame$Item_Type, typeFrame$Count, sep=": "))
print(typePlot)
dev.off()
View(typeFrame)
#Keaton Raymond
#CS 4470
#TODO
#figure out how he cleaned the data to have a correct scale as opposed to the current
library(readr) #used to read in the files
#library(dplyr)
#library(tidyr)
#import train/test data
trainDataCSV = read_csv("data/Train.csv")
testDataCSV = read_csv("data/Test.csv")
#add the outlet sales column to the test data dataframe and set to NA
#needed so that we can use rbind below
testDataCSV$Item_Outlet_Sales = NA
#combine the two datasets
joinedDataFrame = rbind(trainDataCSV,testDataCSV)
#Keaton Raymond
#CS 4470
#TODO
#figure out how he cleaned the data to have a correct scale as opposed to the current
#import libraries
library(ggplot2)
library(gridExtra) #needed for grid.arrange()
#drop all rows from the joined data frame where the item_weight is NA
weightFrame = joinedDataFrame[!(is.na(joinedDataFrame$Item_Weight)), ]
#create a histogram for the weightFrame where x is the item_weight
#col=I("black") makes the outline of each bar black, and fill changes the color of the bar itself
weightPlot = ggplot(weightFrame, aes(x=Item_Weight)) + geom_histogram(col=I("black"), fill="grey")
#drop all rows from the joined data frame where the item_visibility is NA
visibilityFrame = joinedDataFrame[!(is.na(joinedDataFrame$Item_Visibility)), ]
#create a histogram where x is the item_visibility
visibilityPlot = ggplot(visibilityFrame, aes(x=Item_Visibility)) + geom_histogram(col=I("black"), fill="grey")
#drop all. rows from the joined data frame where the item_mrp is NA
mrpFrame = joinedDataFrame[!(is.na(joinedDataFrame$Item_MRP)), ]
#create a histogram where x is the item_MRP
#this plot doesn't have the outline like the above two, only the fill
#binwidth changes the width of the histogram bars, which changes the range for which a row is counted for that bar's count
mrpPlot = ggplot(mrpFrame, aes(x=Item_MRP)) + geom_histogram(fill="grey", binwidth = 0.5)
#change the dimensions and resolution to not have square plots
#just used the same dimensions and resolution as in the last assignment
png("Figures/question1GraphA.png", width=13, height=9, units="in", res=108)
#arrange the three plots in one image
#nrow=2 changes the number of rows, by default this is one meaning all of the plots are next to each other
grid.arrange(weightPlot, visibilityPlot, mrpPlot, nrow = 2)
dev.off()
#Keaton Raymond
#CS 4470
#TODO
#figure out how he cleaned the data to have a correct scale as opposed to the current
#import libraries
library(ggplot2)
library(dplyr) #not sure if needed
library("data.table")
#creates a table that contains the item type and the count for that item type
typeTable = table(joinedDataFrame$Item_Type)
#convert the table created above into a data frame so I can use ggplot
typeFrame = as.data.frame(typeTable)
#change the column names
colnames(typeFrame) = c("Item_Type", "Count")
#reorder the rows based in ascending order so that the legend is in proper order
setorder(typeFrame, cols="Count")
#define the file to save the image to
png("Figures/question1GraphB.png", width=10, height=9, units="in", res=108)
#creating the plot
#ggplot() create the plot from the typeFrame dataframe, the x axis is the item_type, y axis is the count, and fill defines the color
#geom_bar() says that this is a bar chart, stat="identity" is needed for the bar chart to group properly
#xlab("") removes the default label for the x axis
#theme() changes the x axis labels to be at a 45 degree angle and changes the vertical and horizontal justification so that it is below the graph not overlapping
#scale_fill_discrete() is used to change the legend from the default of only item_type to be item_type: count
typePlot = ggplot(typeFrame, aes(x=Item_Type, y=Count, fill=Item_Type)) +
geom_bar(stat = "identity") +
ggtitle("Item_Type") +
xlab("") +
theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
scale_fill_discrete(labels=paste(typeFrame$Item_Type, typeFrame$Count, sep=": "))
print(typePlot)
dev.off()
#Keaton Raymond
#CS 4470
#TODO
#figure out how he cleaned the data to have a correct scale as opposed to the current
#import libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(gridExtra) #needed for grid.arrange()
#create a table that has the outlet_size and the counts for each outlet_size, useNA counts the NA values as an outlet_size
outletTable = table(joinedDataFrame$Outlet_Size, useNA = "ifany")
outletFrame = as.data.frame(outletTable) #convert the table to a data frame
#change the column names
colnames(outletFrame) = c("Outlet_Size", "Count")
#change the datatype of the values in the dataframe to characters
outletFrame = sapply(outletFrame, as.character)
#change the value of the NA Outlet_Size to a space so that it's label doesn't appear on the chart
outletFrame[is.na(outletFrame)] = " "
#change the outletFrame back to a dataframe
outletFrame = as.data.frame(outletFrame)
#create the plot
#plot the outletframe with x as the outlet size and y as the count
#change the color of the bars to coral
#theme() changes the angle of the x axis labels
#geom_label() adds the count labels on each bar, with vjust changing the height of the label, and fill adds the white background behind the text
#scale_x_discrete() changes the order of the bars so that NA is at the beginning not the end
outletPlot = ggplot(outletFrame, aes(x=Outlet_Size, y=Count)) +
geom_bar(stat = "identity", fill="coral") +
theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
geom_label(aes(label=Count), vjust=0.5, fill="white") +
scale_x_discrete(limits=c(" ", "High", "Medium", "Small"))
#create a table that has the item fat content and the counts
fatTable = table(joinedDataFrame$Item_Fat_Content)
fatFrame = as.data.frame(fatTable) #convert the table to a data frame
#change the names of the columns
colnames(fatFrame) = c("Item_Fat_Content", "Count")
#create the plot
#plot the fat content frame with x as the item fat content and y as the count
#change the color of the bars to coral
#theme() changes the angle of the x axis labels
#geom_label() adds the count labels on each bar, with vjust changing the height of the label, and fill adds the white background behind the text
fatPlot = ggplot(fatFrame, aes(x=Item_Fat_Content, y=Count)) +
geom_bar(stat = "identity", fill="coral") +
theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
geom_label(aes(label=Count), vjust=0.5, fill="white")
#define the png to save the graphs to
png("Figures/question1GraphC.png", width=13, height=9, units="in", res=108)
#create the single image with both grids
#nrow=1 says to put both grids on the same row, by default it puts them on their own rows so they are arranged vertically instead of horizontally
grid.arrange(outletPlot, fatPlot, nrow = 1)
dev.off()
#Keaton Raymond
#CS 4470
#TODO
#figure out how he cleaned the data to have a correct scale as opposed to the current
#import libraries
library(ggplot2)
library(cowplot) #needed for plot_grid()
#create a dataframe and remove all of the rows with na value for item_weight then remove all NA item outlet sales
weightFrame = joinedDataFrame[!(is.na(joinedDataFrame$Item_Weight)), ]
weightFrame = weightFrame[!(is.na(weightFrame$Item_Outlet_Sales)), ]
#create the plot with x as item weight, y as item outlet sales
#geom_point means that each variable presents a point on the plot
#color changes the color of each point
#alpha changes the opacity of the dot
weightPlot = ggplot(weightFrame, aes(x=Item_Weight, y=Item_Outlet_Sales)) + geom_point(color="steelblue1", alpha=0.5)
#same as above but for item visibility
visibilityFrame = joinedDataFrame[!(is.na(joinedDataFrame$Item_Visibility)), ]
visibilityFrame = visibilityFrame[!(is.na(visibilityFrame$Item_Outlet_Sales)), ]
#same as above but with visibility and item outlet sales
visibilityPlot = ggplot(visibilityFrame, aes(x=Item_Visibility, y=Item_Outlet_Sales)) + geom_point(color="steelblue1", alpha=0.5)
#same as above but for item mrp
mrpFrame = joinedDataFrame[!(is.na(joinedDataFrame$Item_MRP)), ]
mrpFrame = mrpFrame[!(is.na(mrpFrame$Item_Outlet_Sales)), ]
#same as above but with mrp and item outlet sales
mrpPlot = ggplot(mrpFrame, aes(x=Item_MRP, y=Item_Outlet_Sales)) + geom_point(color="steelblue1", alpha=0.5)
#change the dimensions and resolution to not have square plot
png("Figures/question1GraphD.png", width=13, height=9, units="in", res=108)
#put the bottom two plots together as one plot object
#without this you can't have the one wide plot on the top and two on the bottom
bottomRow = plot_grid(visibilityPlot, mrpPlot)
#put the top plot and bottom row created above on one plot
#defining that it only has one column so that it puts the first on top of the bottom row
plot_grid(weightPlot, bottomRow, ncol=1)
dev.off()
#Keaton Raymond
#CS 4470
library(readr) #used to read in the files
#import train/test data
trainDataCSV = read_csv("data/Train.csv")
testDataCSV = read_csv("data/Test.csv")
#add the outlet sales column to the test data dataframe and set to NA
#needed so that we can use rbind below
testDataCSV$Item_Outlet_Sales = NA
#combine the two datasets
joinedDataFrame = rbind(trainDataCSV,testDataCSV)
#Keaton Raymond
#CS 4470
#import libraries
library(ggplot2)
library(gridExtra) #needed for grid.arrange()
#drop all rows from the joined data frame where the item_weight is NA
weightFrame = joinedDataFrame[!(is.na(joinedDataFrame$Item_Weight)), ]
#create a histogram for the weightFrame where x is the item_weight
#col=I("black") makes the outline of each bar black, and fill changes the color of the bar itself
weightPlot = ggplot(weightFrame, aes(x=Item_Weight)) + geom_histogram(col=I("black"), fill="grey")
#drop all rows from the joined data frame where the item_visibility is NA
visibilityFrame = joinedDataFrame[!(is.na(joinedDataFrame$Item_Visibility)), ]
#create a histogram where x is the item_visibility
visibilityPlot = ggplot(visibilityFrame, aes(x=Item_Visibility)) + geom_histogram(col=I("black"), fill="grey")
#drop all. rows from the joined data frame where the item_mrp is NA
mrpFrame = joinedDataFrame[!(is.na(joinedDataFrame$Item_MRP)), ]
#create a histogram where x is the item_MRP
#this plot doesn't have the outline like the above two, only the fill
#binwidth changes the width of the histogram bars, which changes the range for which a row is counted for that bar's count
mrpPlot = ggplot(mrpFrame, aes(x=Item_MRP)) + geom_histogram(fill="grey", binwidth = 0.5)
#change the dimensions and resolution to not have square plots
#just used the same dimensions and resolution as in the last assignment
png("Figures/question1GraphA.png", width=13, height=9, units="in", res=108)
#arrange the three plots in one image
#nrow=2 changes the number of rows, by default this is one meaning all of the plots are next to each other
grid.arrange(weightPlot, visibilityPlot, mrpPlot, nrow = 2)
dev.off()
#Keaton Raymond
#CS 4470
#import libraries
library(ggplot2)
#library(dplyr) #not sure if needed
library("data.table")
#creates a table that contains the item type and the count for that item type
typeTable = table(joinedDataFrame$Item_Type)
#convert the table created above into a data frame so I can use ggplot
typeFrame = as.data.frame(typeTable)
#change the column names
colnames(typeFrame) = c("Item_Type", "Count")
#reorder the rows based in ascending order so that the legend is in proper order
setorder(typeFrame, cols="Count")
#define the file to save the image to
png("Figures/question1GraphB.png", width=10, height=9, units="in", res=108)
#creating the plot
#ggplot() create the plot from the typeFrame dataframe, the x axis is the item_type, y axis is the count, and fill defines the color
#geom_bar() says that this is a bar chart, stat="identity" is needed for the bar chart to group properly
#xlab("") removes the default label for the x axis
#theme() changes the x axis labels to be at a 45 degree angle and changes the vertical and horizontal justification so that it is below the graph not overlapping
#scale_fill_discrete() is used to change the legend from the default of only item_type to be item_type: count
typePlot = ggplot(typeFrame, aes(x=Item_Type, y=Count, fill=Item_Type)) +
geom_bar(stat = "identity") +
ggtitle("Item_Type") +
xlab("") +
theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
scale_fill_discrete(labels=paste(typeFrame$Item_Type, typeFrame$Count, sep=": "))
print(typePlot)
dev.off()
#Keaton Raymond
#CS 4470
#import libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(gridExtra) #needed for grid.arrange()
#create a table that has the outlet_size and the counts for each outlet_size, useNA counts the NA values as an outlet_size
outletTable = table(joinedDataFrame$Outlet_Size, useNA = "ifany")
outletFrame = as.data.frame(outletTable) #convert the table to a data frame
#change the column names
colnames(outletFrame) = c("Outlet_Size", "Count")
#change the datatype of the values in the dataframe to characters
outletFrame = sapply(outletFrame, as.character)
#change the value of the NA Outlet_Size to a space so that it's label doesn't appear on the chart
outletFrame[is.na(outletFrame)] = " "
#change the outletFrame back to a dataframe
outletFrame = as.data.frame(outletFrame)
#create the plot
#plot the outletframe with x as the outlet size and y as the count
#change the color of the bars to coral
#theme() changes the angle of the x axis labels
#geom_label() adds the count labels on each bar, with vjust changing the height of the label, and fill adds the white background behind the text
#scale_x_discrete() changes the order of the bars so that NA is at the beginning not the end
outletPlot = ggplot(outletFrame, aes(x=Outlet_Size, y=Count)) +
geom_bar(stat = "identity", fill="coral") +
theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
geom_label(aes(label=Count), vjust=0.5, fill="white") +
scale_x_discrete(limits=c(" ", "High", "Medium", "Small"))
#create a table that has the item fat content and the counts
fatTable = table(joinedDataFrame$Item_Fat_Content)
fatFrame = as.data.frame(fatTable) #convert the table to a data frame
#change the names of the columns
colnames(fatFrame) = c("Item_Fat_Content", "Count")
#create the plot
#plot the fat content frame with x as the item fat content and y as the count
#change the color of the bars to coral
#theme() changes the angle of the x axis labels
#geom_label() adds the count labels on each bar, with vjust changing the height of the label, and fill adds the white background behind the text
fatPlot = ggplot(fatFrame, aes(x=Item_Fat_Content, y=Count)) +
geom_bar(stat = "identity", fill="coral") +
theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
geom_label(aes(label=Count), vjust=0.5, fill="white")
#define the png to save the graphs to
png("Figures/question1GraphC.png", width=13, height=9, units="in", res=108)
#create the single image with both grids
#nrow=1 says to put both grids on the same row, by default it puts them on their own rows so they are arranged vertically instead of horizontally
grid.arrange(outletPlot, fatPlot, nrow = 1)
dev.off()
#Keaton Raymond
#CS 4470
#import libraries
library(ggplot2)
library(cowplot) #needed for plot_grid()
#create a dataframe and remove all of the rows with na value for item_weight then remove all NA item outlet sales
weightFrame = joinedDataFrame[!(is.na(joinedDataFrame$Item_Weight)), ]
weightFrame = weightFrame[!(is.na(weightFrame$Item_Outlet_Sales)), ]
#create the plot with x as item weight, y as item outlet sales
#geom_point means that each variable presents a point on the plot
#color changes the color of each point
#alpha changes the opacity of the dot
weightPlot = ggplot(weightFrame, aes(x=Item_Weight, y=Item_Outlet_Sales)) + geom_point(color="steelblue1", alpha=0.5)
#same as above but for item visibility
visibilityFrame = joinedDataFrame[!(is.na(joinedDataFrame$Item_Visibility)), ]
visibilityFrame = visibilityFrame[!(is.na(visibilityFrame$Item_Outlet_Sales)), ]
#same as above but with visibility and item outlet sales
visibilityPlot = ggplot(visibilityFrame, aes(x=Item_Visibility, y=Item_Outlet_Sales)) + geom_point(color="steelblue1", alpha=0.5)
#same as above but for item mrp
mrpFrame = joinedDataFrame[!(is.na(joinedDataFrame$Item_MRP)), ]
mrpFrame = mrpFrame[!(is.na(mrpFrame$Item_Outlet_Sales)), ]
#same as above but with mrp and item outlet sales
mrpPlot = ggplot(mrpFrame, aes(x=Item_MRP, y=Item_Outlet_Sales)) + geom_point(color="steelblue1", alpha=0.5)
#change the dimensions and resolution to not have square plot
png("Figures/question1GraphD.png", width=13, height=9, units="in", res=108)
#put the bottom two plots together as one plot object
#without this you can't have the one wide plot on the top and two on the bottom
bottomRow = plot_grid(visibilityPlot, mrpPlot)
#put the top plot and bottom row created above on one plot
#defining that it only has one column so that it puts the first on top of the bottom row
plot_grid(weightPlot, bottomRow, ncol=1)
dev.off()
