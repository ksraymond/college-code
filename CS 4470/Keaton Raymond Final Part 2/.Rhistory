#Panama
#changed canada to developed because for some reason it was set to "Developing" and according to my research canada was a developed country well before 2000
lifeData[lifeData$Country == "Canada",]$Status = "Developed"
lifeDataTenCountries = lifeData[lifeData$Country %in% c("Afghanistan", "Serbia", "Canada", "UnitedStatesofAmerica", "Guatemala", "Australia", "Belgium", "Germany", "Pakistan", "Nigeria"),]
#manually filter out outliers that are significantly outside of the expected value for that year, more explanation in report for why
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Canada" & (lifeDataTenCountries$Year == "2006" | lifeDataTenCountries$Year == "2007" | lifeDataTenCountries$Year == "2008")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Guatemala" & (lifeDataTenCountries$Year == "2006" | lifeDataTenCountries$Year == "2007" | lifeDataTenCountries$Year == "2008" | lifeDataTenCountries$Year == "2009" | lifeDataTenCountries$Year == "2010")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Australia" & (lifeDataTenCountries$Year == "2003" | lifeDataTenCountries$Year == "2004")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Belgium" & (lifeDataTenCountries$Year == "2011" | lifeDataTenCountries$Year == "2012" | lifeDataTenCountries$Year == "2013" | lifeDataTenCountries$Year == "2014")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Germany" & (lifeDataTenCountries$Year == "2011" | lifeDataTenCountries$Year == "2012" | lifeDataTenCountries$Year == "2013" | lifeDataTenCountries$Year == "2014")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Nigeria" & (lifeDataTenCountries$Year == "2007" | lifeDataTenCountries$Year == "2008")),]
expenditureTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "UnitedStatesofAmerica"),]
expenditureTenCountries = rbind(expenditureTenCountries, lifeData[lifeData$Country == "Netherlands"],)
#Keaton Raymond
#CS 4470-001
library(tidyverse)
lifeData = read.csv("Data/lifeExpectancy.csv")
#Afghanistan
#Bahamas
#Canada
#UnitedStatesofAmerica
#Panama
#changed canada to developed because for some reason it was set to "Developing" and according to my research canada was a developed country well before 2000
lifeData[lifeData$Country == "Canada",]$Status = "Developed"
lifeDataTenCountries = lifeData[lifeData$Country %in% c("Afghanistan", "Serbia", "Canada", "UnitedStatesofAmerica", "Guatemala", "Australia", "Belgium", "Germany", "Pakistan", "Nigeria"),]
#manually filter out outliers that are significantly outside of the expected value for that year, more explanation in report for why
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Canada" & (lifeDataTenCountries$Year == "2006" | lifeDataTenCountries$Year == "2007" | lifeDataTenCountries$Year == "2008")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Guatemala" & (lifeDataTenCountries$Year == "2006" | lifeDataTenCountries$Year == "2007" | lifeDataTenCountries$Year == "2008" | lifeDataTenCountries$Year == "2009" | lifeDataTenCountries$Year == "2010")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Australia" & (lifeDataTenCountries$Year == "2003" | lifeDataTenCountries$Year == "2004")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Belgium" & (lifeDataTenCountries$Year == "2011" | lifeDataTenCountries$Year == "2012" | lifeDataTenCountries$Year == "2013" | lifeDataTenCountries$Year == "2014")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Germany" & (lifeDataTenCountries$Year == "2011" | lifeDataTenCountries$Year == "2012" | lifeDataTenCountries$Year == "2013" | lifeDataTenCountries$Year == "2014")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Nigeria" & (lifeDataTenCountries$Year == "2007" | lifeDataTenCountries$Year == "2008")),]
expenditureTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "UnitedStatesofAmerica"),]
expenditureTenCountries = rbind(expenditureTenCountries, (lifeData[lifeData$Country == "Netherlands"],))
#Keaton Raymond
#CS 4470-001
library(tidyverse)
lifeData = read.csv("Data/lifeExpectancy.csv")
#Afghanistan
#Bahamas
#Canada
#UnitedStatesofAmerica
#Panama
#changed canada to developed because for some reason it was set to "Developing" and according to my research canada was a developed country well before 2000
lifeData[lifeData$Country == "Canada",]$Status = "Developed"
lifeDataTenCountries = lifeData[lifeData$Country %in% c("Afghanistan", "Serbia", "Canada", "UnitedStatesofAmerica", "Guatemala", "Australia", "Belgium", "Germany", "Pakistan", "Nigeria"),]
#manually filter out outliers that are significantly outside of the expected value for that year, more explanation in report for why
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Canada" & (lifeDataTenCountries$Year == "2006" | lifeDataTenCountries$Year == "2007" | lifeDataTenCountries$Year == "2008")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Guatemala" & (lifeDataTenCountries$Year == "2006" | lifeDataTenCountries$Year == "2007" | lifeDataTenCountries$Year == "2008" | lifeDataTenCountries$Year == "2009" | lifeDataTenCountries$Year == "2010")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Australia" & (lifeDataTenCountries$Year == "2003" | lifeDataTenCountries$Year == "2004")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Belgium" & (lifeDataTenCountries$Year == "2011" | lifeDataTenCountries$Year == "2012" | lifeDataTenCountries$Year == "2013" | lifeDataTenCountries$Year == "2014")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Germany" & (lifeDataTenCountries$Year == "2011" | lifeDataTenCountries$Year == "2012" | lifeDataTenCountries$Year == "2013" | lifeDataTenCountries$Year == "2014")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Nigeria" & (lifeDataTenCountries$Year == "2007" | lifeDataTenCountries$Year == "2008")),]
expenditureTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "UnitedStatesofAmerica"),]
expenditureTenCountries = rbind(expenditureTenCountries, lifeData[lifeData$Country == "Netherlands",])
#expenditureTenCountries = expenditureTenCountries[!is.na(expenditureTenCountries$Totalexpenditure),]
#expenditureTenCountries = expenditureTenCountries[expenditureTenCountries$BMI > 10,]
#Keaton Raymond
#CS 4470-001
library(tidyverse)
lifeData = read.csv("Data/lifeExpectancy.csv")
#Afghanistan
#Bahamas
#Canada
#UnitedStatesofAmerica
#Panama
#changed canada to developed because for some reason it was set to "Developing" and according to my research canada was a developed country well before 2000
lifeData[lifeData$Country == "Canada",]$Status = "Developed"
lifeDataTenCountries = lifeData[lifeData$Country %in% c("Afghanistan", "Serbia", "Canada", "UnitedStatesofAmerica", "Guatemala", "Australia", "Belgium", "Germany", "Pakistan", "Nigeria"),]
#manually filter out outliers that are significantly outside of the expected value for that year, more explanation in report for why
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Canada" & (lifeDataTenCountries$Year == "2006" | lifeDataTenCountries$Year == "2007" | lifeDataTenCountries$Year == "2008")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Guatemala" & (lifeDataTenCountries$Year == "2006" | lifeDataTenCountries$Year == "2007" | lifeDataTenCountries$Year == "2008" | lifeDataTenCountries$Year == "2009" | lifeDataTenCountries$Year == "2010")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Australia" & (lifeDataTenCountries$Year == "2003" | lifeDataTenCountries$Year == "2004")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Belgium" & (lifeDataTenCountries$Year == "2011" | lifeDataTenCountries$Year == "2012" | lifeDataTenCountries$Year == "2013" | lifeDataTenCountries$Year == "2014")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Germany" & (lifeDataTenCountries$Year == "2011" | lifeDataTenCountries$Year == "2012" | lifeDataTenCountries$Year == "2013" | lifeDataTenCountries$Year == "2014")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Nigeria" & (lifeDataTenCountries$Year == "2007" | lifeDataTenCountries$Year == "2008")),]
#remove the USA which doesn't have schooling info and replace it with the Netherlands
expenditureTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "UnitedStatesofAmerica"),]
expenditureTenCountries = rbind(expenditureTenCountries, lifeData[lifeData$Country == "Netherlands",])
#expenditureTenCountries = expenditureTenCountries[!is.na(expenditureTenCountries$Totalexpenditure),]
#expenditureTenCountries = expenditureTenCountries[expenditureTenCountries$BMI > 10,]
png("Figures/testExpenditure.png", width=8, height=8, units="in", res=108)
library(ggplot2)
testExpenditure = ggplot(expenditureTenCountries, aes(x = Schooling, y = Lifeexpectancy, color = Country)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
print(testExpenditure)
dev.off()
png("Figures/thisIsATest.png", width=3, height=8, units="in", res=108)
library(ggplot2)
testFrame = lifeData[lifeData$Country == "Netherlands",]
testPlot = ggplot(testFrame, aes(x = Lifeexpectancy, y = Year)) +
geom_point() +
geom_smooth(method = "lm")
print(testPlot)
dev.off()
#Keaton Raymond
#CS 4470-001
library(tidyverse)
lifeData = read.csv("Data/lifeExpectancy.csv")
#Afghanistan
#Bahamas
#Canada
#UnitedStatesofAmerica
#Panama
#changed canada to developed because for some reason it was set to "Developing" and according to my research canada was a developed country well before 2000
lifeData[lifeData$Country == "Canada",]$Status = "Developed"
lifeDataTenCountries = lifeData[lifeData$Country %in% c("Afghanistan", "Serbia", "Canada", "UnitedStatesofAmerica", "Guatemala", "Australia", "Belgium", "Germany", "Pakistan", "Nigeria"),]
#manually filter out outliers that are significantly outside of the expected value for that year, more explanation in report for why
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Canada" & (lifeDataTenCountries$Year == "2006" | lifeDataTenCountries$Year == "2007" | lifeDataTenCountries$Year == "2008")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Guatemala" & (lifeDataTenCountries$Year == "2006" | lifeDataTenCountries$Year == "2007" | lifeDataTenCountries$Year == "2008" | lifeDataTenCountries$Year == "2009" | lifeDataTenCountries$Year == "2010")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Australia" & (lifeDataTenCountries$Year == "2003" | lifeDataTenCountries$Year == "2004")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Belgium" & (lifeDataTenCountries$Year == "2011" | lifeDataTenCountries$Year == "2012" | lifeDataTenCountries$Year == "2013" | lifeDataTenCountries$Year == "2014")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Germany" & (lifeDataTenCountries$Year == "2011" | lifeDataTenCountries$Year == "2012" | lifeDataTenCountries$Year == "2013" | lifeDataTenCountries$Year == "2014")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Nigeria" & (lifeDataTenCountries$Year == "2007" | lifeDataTenCountries$Year == "2008")),]
#remove the USA which doesn't have schooling info and replace it with the Netherlands
expenditureTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "UnitedStatesofAmerica"),]
expenditureTenCountries = rbind(expenditureTenCountries, lifeData[lifeData$Country == "Netherlands",])
expenditureTenCountries = expenditureTenCountries[!(lifeDataTenCountries$Country == "Netherlands" & (lifeDataTenCountries$Year == "2007" | lifeDataTenCountries$Year == "2008" | lifeDataTenCountries$Year == "2009" | lifeDataTenCountries$Year == "2010")),]
#expenditureTenCountries = expenditureTenCountries[!is.na(expenditureTenCountries$Totalexpenditure),]
#expenditureTenCountries = expenditureTenCountries[expenditureTenCountries$BMI > 10,]
#Keaton Raymond
#CS 4470-001
library(tidyverse)
lifeData = read.csv("Data/lifeExpectancy.csv")
#Afghanistan
#Bahamas
#Canada
#UnitedStatesofAmerica
#Panama
#changed canada to developed because for some reason it was set to "Developing" and according to my research canada was a developed country well before 2000
lifeData[lifeData$Country == "Canada",]$Status = "Developed"
lifeDataTenCountries = lifeData[lifeData$Country %in% c("Afghanistan", "Serbia", "Canada", "UnitedStatesofAmerica", "Guatemala", "Australia", "Belgium", "Germany", "Pakistan", "Nigeria"),]
#manually filter out outliers that are significantly outside of the expected value for that year, more explanation in report for why
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Canada" & (lifeDataTenCountries$Year == "2006" | lifeDataTenCountries$Year == "2007" | lifeDataTenCountries$Year == "2008")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Guatemala" & (lifeDataTenCountries$Year == "2006" | lifeDataTenCountries$Year == "2007" | lifeDataTenCountries$Year == "2008" | lifeDataTenCountries$Year == "2009" | lifeDataTenCountries$Year == "2010")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Australia" & (lifeDataTenCountries$Year == "2003" | lifeDataTenCountries$Year == "2004")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Belgium" & (lifeDataTenCountries$Year == "2011" | lifeDataTenCountries$Year == "2012" | lifeDataTenCountries$Year == "2013" | lifeDataTenCountries$Year == "2014")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Germany" & (lifeDataTenCountries$Year == "2011" | lifeDataTenCountries$Year == "2012" | lifeDataTenCountries$Year == "2013" | lifeDataTenCountries$Year == "2014")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Nigeria" & (lifeDataTenCountries$Year == "2007" | lifeDataTenCountries$Year == "2008")),]
#remove the USA which doesn't have schooling info and replace it with the Netherlands
expenditureTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "UnitedStatesofAmerica"),]
expenditureTenCountries = rbind(expenditureTenCountries, lifeData[lifeData$Country == "Netherlands",])
expenditureTenCountries = expenditureTenCountries[!(expenditureTenCountries$Country == "Netherlands" & (expenditureTenCountries$Year == "2007" | expenditureTenCountries$Year == "2008" | expenditureTenCountries$Year == "2009" | expenditureTenCountries$Year == "2010")),]
#expenditureTenCountries = expenditureTenCountries[!is.na(expenditureTenCountries$Totalexpenditure),]
#expenditureTenCountries = expenditureTenCountries[expenditureTenCountries$BMI > 10,]
png("Figures/thisIsATest.png", width=3, height=8, units="in", res=108)
library(ggplot2)
testFrame = lifeData[lifeData$Country == "Netherlands",]
testPlot = ggplot(testFrame, aes(x = Lifeexpectancy, y = Year)) +
geom_point() +
geom_smooth(method = "lm")
print(testPlot)
dev.off()
png("Figures/thisIsATest.png", width=3, height=8, units="in", res=108)
library(ggplot2)
testFrame = expenditureTenCountries[expenditureTenCountries$Country == "Netherlands",]
testPlot = ggplot(testFrame, aes(x = Lifeexpectancy, y = Year)) +
geom_point() +
geom_smooth(method = "lm")
print(testPlot)
dev.off()
png("Figures/thisIsATest.png", width=3, height=8, units="in", res=108)
library(ggplot2)
testFrame = lifeData[lifeData$Country == "Netherlands",]
testPlot = ggplot(testFrame, aes(x = Lifeexpectancy, y = Year)) +
geom_point() +
geom_smooth(method = "lm")
print(testPlot)
dev.off()
png("Figures/testExpenditure.png", width=8, height=8, units="in", res=108)
library(ggplot2)
testExpenditure = ggplot(expenditureTenCountries, aes(x = Schooling, y = Lifeexpectancy, color = Country)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
print(testExpenditure)
dev.off()
library(ggplot2)
library(lme4)
png("Figures/schooling.png", width=8, height=8, units="in", res=108)
ranYearSlope = lmer(Year ~ Country + (1 + Lifeexpectancy|Country), data = lifeDataTenCountries)
ranYearSummary = lmer(Year ~ Country + (1|Lifeexpectancy), data = lifeDataTenCountries)
testExpenditure = ggplot(expenditureTenCountries, aes(x = Schooling, y = Lifeexpectancy, color = Country)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
print(testExpenditure)
dev.off()
library(ggplot2)
library(lme4)
png("Figures/schooling.png", width=8, height=8, units="in", res=108)
ranSchoolSlope = lmer(Lifeexpectancy ~ Country + (1 + Schooling|Country), data = expenditureTenCountries)
ranSchoolSummary = lmer(Lifeexpectancy ~ Country + (1|Schooling), data = expenditureTenCountries)
testExpenditure = ggplot(expenditureTenCountries, aes(x = Schooling, y = Lifeexpectancy, color = Country)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
print(testExpenditure)
dev.off()
library(ggplot2)
library(lme4)
png("Figures/schooling.png", width=8, height=8, units="in", res=108)
ranSchoolSlope = lmer(Lifeexpectancy ~ Country + (1 + Schooling|Country), data = expenditureTenCountries)
ranSchoolSummary = lmer(Lifeexpectancy ~ Country + (1|Schooling), data = expenditureTenCountries)
testExpenditure = ggplot(expenditureTenCountries, aes(x = Schooling, y = Lifeexpectancy, color = Country)) +
geom_point() +
#geom_smooth(method = "lm", se = FALSE)
geom_line(data = cbind(expenditureTenCountries, pred = predict(ranSchoolSlope)), aes(y = pred), linewidth = 1)
print(testExpenditure)
dev.off()
library(ggplot2)
library(lme4)
png("Figures/schooling.png", width=8, height=8, units="in", res=108)
ranSchoolSlope = lmer(Lifeexpectancy ~ Country + (1 + Schooling|Country), data = expenditureTenCountries)
ranSchoolSummary = lmer(Lifeexpectancy ~ Country + (1|Schooling), data = expenditureTenCountries)
testExpenditure = ggplot(expenditureTenCountries, aes(x = Schooling, y = Lifeexpectancy, color = Country)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, inherit.aes = FALSE, aes(x = Schooling, y = Lifeexpectancy)) +
geom_line(data = cbind(expenditureTenCountries, pred = predict(ranSchoolSlope)), aes(y = pred), linewidth = 1)
print(testExpenditure)
dev.off()
library(ggplot2)
library(lme4)
png("Figures/schooling.png", width=8, height=8, units="in", res=108)
ranSchoolSlope = lmer(Lifeexpectancy ~ Country + (1 + Schooling|Country), data = expenditureTenCountries)
ranSchoolSummary = lmer(Lifeexpectancy ~ Country + (1|Schooling), data = expenditureTenCountries)
#print output of the summary to a file
sink(file = "LMEROutputs/schoolingRandomSummary.txt")
summary(ranYearSummary)
sink(file = NULL)
#print output of slope to a file
sink(file = "LMEROutputs/SchoolingRandomSlope.txt")
summary(ranYearSlope)
sink(file = NULL)
#generate the plot
testExpenditure = ggplot(expenditureTenCountries, aes(x = Schooling, y = Lifeexpectancy, color = Country)) + #plot parameters
geom_point() + #scatterplot
geom_smooth(method = "lm", se = FALSE, inherit.aes = FALSE, aes(x = Schooling, y = Lifeexpectancy)) + #define overall trend line
geom_line(data = cbind(expenditureTenCountries, pred = predict(ranSchoolSlope)), aes(y = pred), linewidth = 1) #define individual trend lines for each country grouping
print(testExpenditure)
dev.off()
library(ggplot2)
library(lme4)
png("Figures/schooling.png", width=8, height=8, units="in", res=108)
ranSchoolSlope = lmer(Lifeexpectancy ~ Country + (1 + Schooling|Country), data = expenditureTenCountries)
ranSchoolSummary = lmer(Lifeexpectancy ~ Country + (1|Schooling), data = expenditureTenCountries)
#print output of the summary to a file
sink(file = "LMEROutputs/schoolingRandomSummary.txt")
summary(ranSchoolSummary)
sink(file = NULL)
#print output of slope to a file
sink(file = "LMEROutputs/SchoolingRandomSlope.txt")
summary(ranSchoolSlope)
sink(file = NULL)
#generate the plot
testExpenditure = ggplot(expenditureTenCountries, aes(x = Schooling, y = Lifeexpectancy, color = Country)) + #plot parameters
geom_point() + #scatterplot
geom_smooth(method = "lm", se = FALSE, inherit.aes = FALSE, aes(x = Schooling, y = Lifeexpectancy)) + #define overall trend line
geom_line(data = cbind(expenditureTenCountries, pred = predict(ranSchoolSlope)), aes(y = pred), linewidth = 1) #define individual trend lines for each country grouping
print(testExpenditure)
dev.off()
library(ggplot2)
library(lme4)
#define png for final chart
png("Figures/schooling.png", width=8, height=8, units="in", res=108)
#run LMM analyses for slope and intercept/a general summary
ranSchoolSlope = lmer(Lifeexpectancy ~ Country + (1 + Schooling|Country), data = expenditureTenCountries)
ranSchoolSummary = lmer(Lifeexpectancy ~ Country + (1|Schooling), data = expenditureTenCountries)
#print output of the summary to a file
sink(file = "LMEROutputs/schoolingRandomSummary.txt")
summary(ranSchoolSummary)
sink(file = NULL)
#print output of slope to a file
sink(file = "LMEROutputs/SchoolingRandomSlope.txt")
summary(ranSchoolSlope)
sink(file = NULL)
#generate the plot
testExpenditure = ggplot(expenditureTenCountries, aes(x = Schooling, y = Lifeexpectancy, color = Country)) + #plot parameters
geom_point() + #scatterplot
geom_smooth(method = "lm", se = FALSE, inherit.aes = FALSE, aes(x = Schooling, y = Lifeexpectancy)) + #define overall trend line
geom_line(data = cbind(expenditureTenCountries, pred = predict(ranSchoolSlope)), aes(y = pred), linewidth = 1) #define individual trend lines for each country grouping
print(testExpenditure)
dev.off()
#Keaton Raymond
#CS 4470-001
library(tidyverse)
lifeData = read.csv("Data/lifeExpectancy.csv")
#Afghanistan
#Bahamas
#Canada
#UnitedStatesofAmerica
#Panama
#changed canada to developed because for some reason it was set to "Developing" and according to my research canada was a developed country well before 2000
lifeData[lifeData$Country == "Canada",]$Status = "Developed"
lifeDataTenCountries = lifeData[lifeData$Country %in% c("Afghanistan", "Serbia", "Canada", "UnitedStatesofAmerica", "Guatemala", "Australia", "Belgium", "Germany", "Pakistan", "Nigeria"),]
#manually filter out outliers that are significantly outside of the expected value for that year, more explanation in report for why
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Canada" & (lifeDataTenCountries$Year == "2006" | lifeDataTenCountries$Year == "2007" | lifeDataTenCountries$Year == "2008")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Guatemala" & (lifeDataTenCountries$Year == "2006" | lifeDataTenCountries$Year == "2007" | lifeDataTenCountries$Year == "2008" | lifeDataTenCountries$Year == "2009" | lifeDataTenCountries$Year == "2010")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Australia" & (lifeDataTenCountries$Year == "2003" | lifeDataTenCountries$Year == "2004")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Belgium" & (lifeDataTenCountries$Year == "2011" | lifeDataTenCountries$Year == "2012" | lifeDataTenCountries$Year == "2013" | lifeDataTenCountries$Year == "2014")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Germany" & (lifeDataTenCountries$Year == "2011" | lifeDataTenCountries$Year == "2012" | lifeDataTenCountries$Year == "2013" | lifeDataTenCountries$Year == "2014")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Nigeria" & (lifeDataTenCountries$Year == "2007" | lifeDataTenCountries$Year == "2008")),]
#remove the USA which doesn't have schooling info and replace it with the Netherlands
schoolingDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "UnitedStatesofAmerica"),]
schoolingDataTenCountries = rbind(schoolingDataTenCountries, lifeData[lifeData$Country == "Netherlands",])
schoolingDataTenCountries = schoolingDataTenCountries[!(schoolingDataTenCountries$Country == "Netherlands" & (schoolingDataTenCountries$Year == "2007" | schoolingDataTenCountries$Year == "2008" | schoolingDataTenCountries$Year == "2009" | schoolingDataTenCountries$Year == "2010")),]
library(ggplot2)
library(lme4)
#define png for final chart
png("Figures/schooling.png", width=8, height=8, units="in", res=108)
#run LMM analyses for slope and intercept/a general summary
ranSchoolSlope = lmer(Lifeexpectancy ~ Country + (1 + Schooling|Country), data = schoolingDataTenCountries)
ranSchoolSummary = lmer(Lifeexpectancy ~ Country + (1|Schooling), data = schoolingDataTenCountries)
#print output of the summary to a file
sink(file = "LMEROutputs/schoolingRandomSummary.txt")
summary(ranSchoolSummary)
sink(file = NULL)
#print output of slope to a file
sink(file = "LMEROutputs/SchoolingRandomSlope.txt")
summary(ranSchoolSlope)
sink(file = NULL)
#generate the plot
schoolingChart = ggplot(schoolingDataTenCountries, aes(x = Schooling, y = Lifeexpectancy, color = Country)) + #plot parameters
geom_point() + #scatterplot
geom_smooth(method = "lm", se = FALSE, inherit.aes = FALSE, aes(x = Schooling, y = Lifeexpectancy)) + #define overall trend line
geom_line(data = cbind(schoolingDataTenCountries, pred = predict(ranSchoolSlope)), aes(y = pred), linewidth = 1) #define individual trend lines for each country grouping
print(schoolingChart)
dev.off()
library(ggplot2)
library(lme4)
#define PNG to save file to
png("Figures/lifeExpectancy.png", width=8, height=8, units="in", res=108)
#run LMM analyses for slope and intercept/a general summary
ranYearSlope = lmer(Year ~ Country + (1 + Lifeexpectancy|Country), data = lifeDataTenCountries)
ranYearSummary = lmer(Year ~ Country + (1|Lifeexpectancy), data = lifeDataTenCountries)
#print output of the summary to a file
sink(file = "LMEROutputs/expectancyRandomSummary.txt")
summary(ranYearSummary)
sink(file = NULL)
#print output of slope to a file
sink(file = "LMEROutputs/expectancyRandomSlope.txt")
summary(ranYearSlope)
sink(file = NULL)
#generate the plot
lifeExpectancyChart = ggplot(lifeDataTenCountries, aes(x = Lifeexpectancy, y = Year, color = Country)) + #define plot params
geom_point() + #scatterplot
geom_smooth(method = "lm", se = FALSE, inherit.aes = FALSE, aes(x = Lifeexpectancy, y = Year)) + #define the overall trend line, will explain more in report but this is to show how useless it is with this kind of data
geom_line(data = cbind(lifeDataTenCountries, pred = predict(ranYearSlope)), aes(y = pred), linewidth = 1) #define the trend lines from the calculated random slopes
print(lifeExpectancyChart)
dev.off()
png("Figures/thisIsATest.png", width=3, height=8, units="in", res=108)
library(ggplot2)
testFrame = lifeData[lifeData$Country == "Nigeria",]
testPlot = ggplot(testFrame, aes(x = Lifeexpectancy, y = Year)) +
geom_point() +
geom_smooth(method = "lm")
print(testPlot)
dev.off()
View(lifeData)
library(ggplot2)
library(lme4)
#define PNG to save file to
png("Figures/lifeExpectancy.png", width=8, height=8, units="in", res=108)
#run LMM analyses for slope and intercept/a general summary
ranYearSlope = lmer(Year ~ Country + (1 + Lifeexpectancy|Country), data = lifeDataTenCountries)
ranYearSummary = lmer(Year ~ Country + (1|Lifeexpectancy), data = lifeDataTenCountries)
#print output of the summary to a file
sink(file = "LMEROutputs/expectancyRandomSummary.txt")
summary(ranYearSummary)
sink(file = NULL)
#print output of slope to a file
sink(file = "LMEROutputs/expectancyRandomSlope.txt")
summary(ranYearSlope)
sink(file = NULL)
#generate the plot
lifeExpectancyChart = ggplot(lifeDataTenCountries, aes(x = Lifeexpectancy, y = Year, color = Country)) + #define plot params
geom_point() + #scatterplot
geom_smooth(method = "lm", se = FALSE, inherit.aes = FALSE, aes(y = Lifeexpectancy, x = Year)) + #define the overall trend line, will explain more in report but this is to show how useless it is with this kind of data
geom_line(data = cbind(lifeDataTenCountries, pred = predict(ranYearSlope)), aes(y = pred), linewidth = 1) #define the trend lines from the calculated random slopes
print(lifeExpectancyChart)
dev.off()
library(ggplot2)
library(lme4)
#define PNG to save file to
png("Figures/lifeExpectancy.png", width=8, height=8, units="in", res=108)
#run LMM analyses for slope and intercept/a general summary
ranYearSlope = lmer(Year ~ Country + (1 + Lifeexpectancy|Country), data = lifeDataTenCountries)
ranYearSummary = lmer(Year ~ Country + (1|Lifeexpectancy), data = lifeDataTenCountries)
#print output of the summary to a file
sink(file = "LMEROutputs/expectancyRandomSummary.txt")
summary(ranYearSummary)
sink(file = NULL)
#print output of slope to a file
sink(file = "LMEROutputs/expectancyRandomSlope.txt")
summary(ranYearSlope)
sink(file = NULL)
#generate the plot
lifeExpectancyChart = ggplot(lifeDataTenCountries, aes(x = Lifeexpectancy, y = Year, color = Country)) + #define plot params
geom_point() + #scatterplot
geom_smooth(method = "lm", se = FALSE, inherit.aes = FALSE, aes(x = Lifeexpectancy, y = Year)) + #define the overall trend line, will explain more in report but this is to show how useless it is with this kind of data
geom_line(data = cbind(lifeDataTenCountries, pred = predict(ranYearSlope)), aes(y = pred), linewidth = 1) #define the trend lines from the calculated random slopes
print(lifeExpectancyChart)
dev.off()
#Keaton Raymond
#CS 4470-001
library(tidyverse)
lifeData = read.csv("Data/lifeExpectancy.csv")
#Afghanistan
#Bahamas
#Canada
#UnitedStatesofAmerica
#Panama
#changed canada to developed because for some reason it was set to "Developing" and according to my research canada was a developed country well before 2000
lifeData[lifeData$Country == "Canada",]$Status = "Developed"
lifeDataTenCountries = lifeData[lifeData$Country %in% c("Afghanistan", "Serbia", "Canada", "UnitedStatesofAmerica", "Guatemala", "Australia", "Belgium", "Germany", "Pakistan", "Nigeria"),]
#manually filter out outliers that are significantly outside of the expected value for that year, more explanation in report for why
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Canada" & (lifeDataTenCountries$Year == "2006" | lifeDataTenCountries$Year == "2007" | lifeDataTenCountries$Year == "2008")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Guatemala" & (lifeDataTenCountries$Year == "2006" | lifeDataTenCountries$Year == "2007" | lifeDataTenCountries$Year == "2008" | lifeDataTenCountries$Year == "2009" | lifeDataTenCountries$Year == "2010")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Australia" & (lifeDataTenCountries$Year == "2003" | lifeDataTenCountries$Year == "2004")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Belgium" & (lifeDataTenCountries$Year == "2011" | lifeDataTenCountries$Year == "2012" | lifeDataTenCountries$Year == "2013" | lifeDataTenCountries$Year == "2014")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Germany" & (lifeDataTenCountries$Year == "2011" | lifeDataTenCountries$Year == "2012" | lifeDataTenCountries$Year == "2013" | lifeDataTenCountries$Year == "2014")),]
lifeDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "Nigeria" & (lifeDataTenCountries$Year == "2007" | lifeDataTenCountries$Year == "2008")),]
#remove the USA which doesn't have schooling info and replace it with the Netherlands
schoolingDataTenCountries = lifeDataTenCountries[!(lifeDataTenCountries$Country == "UnitedStatesofAmerica"),]
schoolingDataTenCountries = rbind(schoolingDataTenCountries, lifeData[lifeData$Country == "Netherlands",])
schoolingDataTenCountries = schoolingDataTenCountries[!(schoolingDataTenCountries$Country == "Netherlands" & (schoolingDataTenCountries$Year == "2007" | schoolingDataTenCountries$Year == "2008" | schoolingDataTenCountries$Year == "2009" | schoolingDataTenCountries$Year == "2010")),]
library(ggplot2)
library(lme4)
#define PNG to save file to
png("Figures/lifeExpectancy.png", width=8, height=8, units="in", res=108)
#run LMM analyses for slope and intercept/a general summary
ranYearSlope = lmer(Year ~ Country + (1 + Lifeexpectancy|Country), data = lifeDataTenCountries)
ranYearSummary = lmer(Year ~ Country + (1|Lifeexpectancy), data = lifeDataTenCountries)
#print output of the summary to a file
sink(file = "LMEROutputs/expectancyRandomSummary.txt")
summary(ranYearSummary)
sink(file = NULL)
#print output of slope to a file
sink(file = "LMEROutputs/expectancyRandomSlope.txt")
summary(ranYearSlope)
sink(file = NULL)
#generate the plot
lifeExpectancyChart = ggplot(lifeDataTenCountries, aes(x = Lifeexpectancy, y = Year, color = Country)) + #define plot params
geom_point() + #scatterplot
geom_smooth(method = "lm", se = FALSE, inherit.aes = FALSE, aes(x = Lifeexpectancy, y = Year)) + #define the overall trend line, will explain more in report but this is to show how useless it is with this kind of data
geom_line(data = cbind(lifeDataTenCountries, pred = predict(ranYearSlope)), aes(y = pred), linewidth = 1) #define the trend lines from the calculated random slopes
print(lifeExpectancyChart)
dev.off()
library(ggplot2)
library(lme4)
#define png for final chart
png("Figures/schooling.png", width=8, height=8, units="in", res=108)
#run LMM analyses for slope and intercept/a general summary
ranSchoolSlope = lmer(Lifeexpectancy ~ Country + (1 + Schooling|Country), data = schoolingDataTenCountries)
ranSchoolSummary = lmer(Lifeexpectancy ~ Country + (1|Schooling), data = schoolingDataTenCountries)
#print output of the summary to a file
sink(file = "LMEROutputs/schoolingRandomSummary.txt")
summary(ranSchoolSummary)
sink(file = NULL)
#print output of slope to a file
sink(file = "LMEROutputs/SchoolingRandomSlope.txt")
summary(ranSchoolSlope)
sink(file = NULL)
#generate the plot
schoolingChart = ggplot(schoolingDataTenCountries, aes(x = Schooling, y = Lifeexpectancy, color = Country)) + #plot parameters
geom_point() + #scatterplot
geom_smooth(method = "lm", se = FALSE, inherit.aes = FALSE, aes(x = Schooling, y = Lifeexpectancy)) + #define overall trend line
geom_line(data = cbind(schoolingDataTenCountries, pred = predict(ranSchoolSlope)), aes(y = pred), linewidth = 1) #define individual trend lines for each country grouping
print(schoolingChart)
dev.off()
library(ggplot2)
library(lme4)
#define png for final chart
png("Figures/schooling.png", width=8, height=8, units="in", res=108)
#run LMM analyses for slope and intercept/a general summary
ranSchoolSlope = lmer(Lifeexpectancy ~ Country + (1 + Schooling|Country), data = schoolingDataTenCountries)
ranSchoolSummary = lmer(Lifeexpectancy ~ Country + (1|Schooling), data = schoolingDataTenCountries)
#print output of the summary to a file
sink(file = "LMEROutputs/schoolingRandomSummary.txt")
summary(ranSchoolSummary)
sink(file = NULL)
#print output of slope to a file
sink(file = "LMEROutputs/SchoolingRandomSlope.txt")
summary(ranSchoolSlope)
sink(file = NULL)
#generate the plot
schoolingChart = ggplot(schoolingDataTenCountries, aes(x = Schooling, y = Lifeexpectancy, color = Country)) + #plot parameters
geom_point() + #scatterplot
geom_smooth(method = "lm", se = FALSE, inherit.aes = FALSE, aes(x = Schooling, y = Lifeexpectancy)) + #define overall trend line
geom_line(data = cbind(schoolingDataTenCountries, pred = predict(ranSchoolSlope)), aes(y = pred), linewidth = 1) #define individual trend lines for each country grouping
print(schoolingChart)
dev.off()
library(ggplot2)
library(lme4)
#define PNG to save file to
png("Figures/lifeExpectancy.png", width=8, height=8, units="in", res=108)
#run LMM analyses for slope and intercept/a general summary
ranYearSlope = lmer(Year ~ Country + (1 + Lifeexpectancy|Country), data = lifeDataTenCountries)
ranYearSummary = lmer(Year ~ Country + (1|Lifeexpectancy), data = lifeDataTenCountries)
#print output of the summary to a file
sink(file = "LMEROutputs/expectancyRandomSummary.txt")
summary(ranYearSummary)
sink(file = NULL)
#print output of slope to a file
sink(file = "LMEROutputs/expectancyRandomSlope.txt")
summary(ranYearSlope)
sink(file = NULL)
#generate the plot
lifeExpectancyChart = ggplot(lifeDataTenCountries, aes(x = Lifeexpectancy, y = Year, color = Country)) + #define plot params
geom_point() + #scatterplot
geom_smooth(method = "lm", se = FALSE, inherit.aes = FALSE, aes(x = Lifeexpectancy, y = Year)) + #define the overall trend line, will explain more in report but this is to show how useless it is with this kind of data
geom_line(data = cbind(lifeDataTenCountries, pred = predict(ranYearSlope)), aes(y = pred), linewidth = 1) #define the trend lines from the calculated random slopes
print(lifeExpectancyChart)
dev.off()
